import { INumeric } from "./_numeric";
import { ICharacter } from "./_character";
import { ABAPObject } from "./abap_object";
import { Table } from "./table";
import { Structure } from "./structure";
import { Hex } from "./hex";
import { Float } from "./float";
type PointerType = INumeric | Table | ICharacter | ABAPObject | undefined | Structure | Float;
export declare class FieldSymbol {
    private pointer;
    private casting;
    private readonly type;
    constructor(type?: PointerType);
    getQualifiedName(): any;
    assign(pointer: PointerType): void;
    setCasting(): void;
    unassign(): void;
    isAssigned(): boolean;
    getPointer(): any;
    dereference(): INumeric | ICharacter | import("./integer8").Integer8 | Float | ABAPObject | Table | Structure | undefined;
    clear(): void | Structure | undefined;
    get(): any;
    appendInitial(): import("./table").TableRowType | undefined;
    array(): any;
    getArrayLength(): any;
    set(value: any): this | undefined;
    getOffset(input: {
        offset?: number | INumeric | Hex;
        length?: number | INumeric | Hex;
    }): any;
}
export {};
