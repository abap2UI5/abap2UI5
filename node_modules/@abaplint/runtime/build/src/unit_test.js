"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnitTestResult = void 0;
/* eslint-disable max-len */
class UnitTestMethodResult {
    constructor(name) {
        this.name = name;
        this.result = undefined;
        this.result = undefined;
    }
    pass() {
        this.result = "Pass";
    }
    fail() {
        this.result = "Fail";
    }
    skip() {
        this.result = "Skip";
    }
}
class UnitTestClassResult {
    constructor(name) {
        this.name = name;
        this.methods = [];
    }
    addMethod(name) {
        const ret = new UnitTestMethodResult(name);
        this.methods.push(ret);
        return ret;
    }
}
class UnitTestObjectResult {
    constructor(name) {
        this.name = name;
        this.classes = [];
    }
    addTestClass(name) {
        const ret = new UnitTestClassResult(name);
        this.classes.push(ret);
        return ret;
    }
}
class UnitTestResult {
    constructor() {
        this.objects = [];
    }
    addObject(name) {
        const ret = new UnitTestObjectResult(name);
        this.objects.push(ret);
        return ret;
    }
    xUnitXML() {
        // https://xunit.net/docs/format-xml-v2
        // <assemblies> = project
        // <assembly> = global object/global class
        // <collection> = local class
        // <test> = method
        let ret = `<?xml version="1.0" encoding="utf-8"?>\n<assemblies>\n`;
        for (const obj of this.objects) {
            ret += `  <assembly name="${obj.name}" test-framework="abap-framework" environment="abap-environment">\n`;
            for (const clas of obj.classes) {
                ret += `    <collection name="${clas.name}">\n`;
                for (const meth of clas.methods) {
                    ret += `      ` +
                        `<test name="${obj.name}.${clas.name}.${meth.name}" type="${obj.name}.${clas.name}" method="${obj.name}.${clas.name}.${meth.name}" time="0" result="${meth.result}"></test>\n`;
                }
                ret += `    </collection>\n`;
            }
            ret += `  </assembly>\n`;
        }
        ret += `</assemblies>`;
        return ret;
    }
}
exports.UnitTestResult = UnitTestResult;
//# sourceMappingURL=unit_test.js.map