import { append } from "./append";
import { assert } from "./assert";
import { assign } from "./assign";
import { clear } from "./clear";
import { commit } from "./commit";
import { concatenate } from "./concatenate";
import { condense } from "./condense";
import { convert } from "./convert";
import { createData } from "./create_data";
import { deleteInternal } from "./delete_internal";
import { describe } from "./describe";
import { find } from "./find";
import { collect } from "./collect";
import { overlay } from "./overlay";
import { cast } from "./cast";
import { getBit } from "./get_bit";
import { readReport } from "./read_report";
import { raiseEvent } from "./raise_event";
import { receive } from "./receive";
import { getLocale } from "./get_locale";
import { unpack } from "./unpack";
import { getParameter } from "./get_parameter";
import { setLocale } from "./set_locale";
import { getRunTime } from "./get_run_time";
import { getTime } from "./get_time";
import { IInsertDatabaseOptions } from "./insert_database";
import { insertInternal } from "./insert_internal";
import { IDeleteDatabaseOptions } from "./delete_database";
import { loop } from "./loop";
import { IMessageOptions } from "./message";
import { IModifyDatabaseOptions } from "./modify_database";
import { modifyInternal } from "./modify_internal";
import { moveCorresponding } from "./move_corresponding";
import { readTable } from "./read_table";
import { replace } from "./replace";
import { rollback } from "./rollback";
import { setBit } from "./set_bit";
import { shift } from "./shift";
import { sort } from "./sort";
import { wait } from "./wait";
import { IOpenCursorDatabaseOptions } from "./open_cursor";
import { setHandler } from "./set_handler";
import { split } from "./split";
import { translate } from "./translate";
import { callTransaction } from "./call_transaction";
import { IUpdateDatabaseOptions } from "./update_database";
import { IWriteOptions } from "./write";
import { Context } from "../context";
import { ICharacter } from "../types/_character";
import { FieldSymbol, Structure, Table } from "../types";
import { INumeric } from "../types/_numeric";
import { ICallFunctionOptions } from "./call_function";
import { SelectDatabaseOptions, SelectRuntimeOptions } from "../db/db";
export declare class Statements {
    append: typeof append;
    assert: typeof assert;
    assign: typeof assign;
    cast: typeof cast;
    clear: typeof clear;
    collect: typeof collect;
    commit: typeof commit;
    concatenate: typeof concatenate;
    condense: typeof condense;
    convert: typeof convert;
    createData: typeof createData;
    deleteInternal: typeof deleteInternal;
    describe: typeof describe;
    find: typeof find;
    unpack: typeof unpack;
    getBit: typeof getBit;
    readReport: typeof readReport;
    getLocale: typeof getLocale;
    getParameter: typeof getParameter;
    getRunTime: typeof getRunTime;
    getTime: typeof getTime;
    insertInternal: typeof insertInternal;
    loop: typeof loop;
    modifyInternal: typeof modifyInternal;
    moveCorresponding: typeof moveCorresponding;
    overlay: typeof overlay;
    raiseEvent: typeof raiseEvent;
    readTable: typeof readTable;
    replace: typeof replace;
    rollback: typeof rollback;
    setBit: typeof setBit;
    setHandler: typeof setHandler;
    setLocale: typeof setLocale;
    shift: typeof shift;
    sort: typeof sort;
    split: typeof split;
    translate: typeof translate;
    wait: typeof wait;
    receive: typeof receive;
    callTransaction: typeof callTransaction;
    private readonly context;
    private readonly traceTotals;
    constructor(context: Context);
    private _trace;
    private _traceAsync;
    _setTrace(min?: number, totals?: boolean): void;
    openCursor(target: INumeric, select: string, options: IOpenCursorDatabaseOptions): Promise<void>;
    fetchNextCursor(cursor: INumeric, target: any, packageSize?: INumeric): Promise<void>;
    closeCursor(cursor: INumeric): Promise<void>;
    deleteDatabase(table: string | ICharacter, options: IDeleteDatabaseOptions): Promise<void>;
    insertDatabase(table: string | ICharacter, options: IInsertDatabaseOptions): Promise<number | undefined>;
    modifyDatabase(table: string | ICharacter, options: IModifyDatabaseOptions): Promise<void>;
    select(target: Structure | Table | FieldSymbol, select: SelectDatabaseOptions, runtimeOptions?: SelectRuntimeOptions): Promise<void>;
    updateDatabase(table: string | ICharacter, options: IUpdateDatabaseOptions): Promise<number>;
    callFunction(options: ICallFunctionOptions): Promise<void>;
    message(options: IMessageOptions): Promise<void>;
    write(source: INumeric | ICharacter | FieldSymbol | string | number, options?: IWriteOptions): void;
}
